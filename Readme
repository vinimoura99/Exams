# üöÄ Exames de C - Progress√£o de Estudos

> Projeto desenvolvido como parte do curr√≠culo da 42 School.
> Este reposit√≥rio documenta minhas solu√ß√µes para os exames pr√°ticos de programa√ß√£o em C.

---

## üî• Status Atual e Foco

O objetivo √© aprofundar o conhecimento em manipula√ß√£o de baixo n√≠vel, mem√≥ria e algoritmos essenciais.

| Exame (Ranck) | Status | Foco Principal |
|:---:|:----:|:---|
| **Ranck 02 (Levels 1-4)** | ‚úÖ Conclu√≠do | Fun√ß√µes Utilit√°rias, Strings e Bitwise |
| **Ranck 03 (Projetos Longos)** | üõ†Ô∏è C√≥digos Prontos | GNL, Backtracking e Algoritmos Complexos |
| **Ranck 04+** | ‚¨ú Pendente | Listas Encadeadas, √Årvores e Hashing |

**Observa√ß√£o do Ranck 03:** Os c√≥digos para as fun√ß√µes est√£o **completos** e funcionando nos testes locais. Restam apenas requisitos finais como a implementa√ß√£o de **`scanf`** em exerc√≠cios espec√≠ficos e o *push* do **TSP**.

**√öltima Atualiza√ß√£o:** 22 de Outubro de 2025

---

## üìö Estrutura do Reposit√≥rio

O reposit√≥rio est√° organizado em pastas que representam os n√≠veis dos exames: `LevelX` para o Ranck 02 e pastas nomeadas para os projetos longos do Ranck 03.

### Ranck 02: Fundamentos e N√≠veis (Levels 1 a 4)

Este exame foca em fun√ß√µes b√°sicas de manipula√ß√£o de dados, strings e aritm√©tica simples.

#### üìÅ N√≠vel 1: Fundamentos B√°sicos

* `ft_strlen`, `ft_swap`, `ft_strcpy`: Manipula√ß√£o de strings e ponteiros.
* `fizzbuzz`, `first_word`: L√≥gica de la√ßos e processamento de strings.
* `ft_rotone`, `ft_rot13`, `ft_ulstr`: Criptografia/manipula√ß√£o de caracteres.
* `ft_putstr`, `ft_repeat_alpha`: Fun√ß√µes de sa√≠da e repeti√ß√£o.

> **Local:** [`./Level1`](./Level1)

#### üìÅ N√≠vel 2: Opera√ß√µes em Strings e Bits

* `do_op`, `ft_atoi`, `ft_max`: Aritm√©tica e convers√£o num√©rica.
* `print_bits`, `swap_bits`, `reverse_bits`: Manipula√ß√£o de bits (bitwise operations).
* `union`, `inter`, `wdmatch`: L√≥gica de conjuntos e compara√ß√£o de strings.
* `camel_to_snake`, `snake_to_camel`: Formata√ß√£o de strings.

> **Local:** [`./Level2`](./Level2)

#### üìÅ N√≠vel 3: Aloca√ß√£o Din√¢mica e Matem√°tica

* `ft_range`, `ft_rrange`: Aloca√ß√£o din√¢mica (`malloc`) de arrays.
* `add_prime_sum`, `pgcd`, `lcm`: Algoritmos matem√°ticos (primos, MDC, MMC).
* `epur_str`, `expand_str`: Normaliza√ß√£o e formata√ß√£o avan√ßada de strings.
* `ft_list_size`: Listas encadeadas b√°sicas (estrutura e tamanho).

> **Local:** [`./Level3`](./Level3)

#### üìÅ N√≠vel 4: Estruturas de Dados e Split

* `ft_split`: Manipula√ß√£o de mem√≥ria e aloca√ß√£o de array de strings.
* `ft_itoa`, `fprime`: Convers√£o num√©rica e algoritmos de fatora√ß√£o.
* `sort_list`, `ft_list_remove_if`: Implementa√ß√£o e manipula√ß√£o avan√ßada de **Listas Encadeadas**.
* `rostring`, `rev_wstr`: Reordena√ß√£o e formata√ß√£o complexa de frases.

> **Local:** [`./Level4`](./Level4)

---

### Ranck 03: Projetos Longos (Backtracking/GNL)

* `Broken_GNL`: Manipula√ß√£o de arquivos, leitura de descritores, vari√°veis `static`.
* `Filter`, `Rip`: Algoritmos complexos e estruturas de dados din√¢micas.
* `N_queens`, `Permutations`: Backtracking, recurs√£o e problemas combinat√≥rios cl√°ssicos.
* `TSP` (Pendente): Algoritmos de grafos (Travelling Salesman Problem).
* `Scanf` (Pendente): Implementa√ß√£o de funcionalidade de entrada formatada.

---

## üíª Como Compilar e Testar

### ‚öôÔ∏è Instru√ß√µes de Compila√ß√£o

1.  **Navegue at√© o diret√≥rio do exerc√≠cio:**
    ```bash
    cd Level2/do_op
    ```

2.  **Compile o c√≥digo:** Utilize as flags de aviso e erro para garantir c√≥digo limpo.
    ```bash
    gcc -Wall -Wextra -Werror <nome_do_arquivo>.c -o program
    ```
    *Exemplo:* `gcc -Wall -Wextra -Werror do_op.c -o do_op`

3.  **Execute o programa com os argumentos necess√°rios:**
    ```bash
    ./program <argumentos>
    ```
    *Exemplo:* `./do_op "42" "+" "42"`

> üí° **Ferramenta de Teste:** O script **`Launcher.py`** (presente no diret√≥rio do Rank 03) pode ser usado para compila√ß√£o e testes r√°pidos com diferentes argumentos e entradas (`stdin`).